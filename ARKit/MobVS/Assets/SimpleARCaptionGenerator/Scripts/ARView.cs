using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using ARKitSDK.SimpleARCaptionGenerator;

namespace UnityEngine.XR.iOS {

	/// <summary>
	/// This Script controls the ARView.
	/// </summary>
	public class ARView : MonoBehaviour {

		public SceneController sceneController; // the scenecontroller
		public Button goBackButton; // the go back button
		public Button hideGUIButton; // the hide gui button
		public Dropdown dropDown; // the dropdown gui element
		private int dropdownValue; // selected dropdown value
		private List<Caption> captions; // the captions

		public Camera FirstPersonCamera; // the ar camera
		public GameObject CaptionPrefab; // a caption prefab
		public GameObject PresentationPlane; // the presentation plane
		public GameObject HSDLogo; // the 3d hsd brand
		public float offsetY = 1.0f; // the gap between ground and object

		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10;  // ARKitPlane layer
	    public Toggle planeLookAt; // the toogle gui element

		void Start() {
			// disabling placeable 3D objects and move/scale scripts
	        PresentationPlane.gameObject.SetActive (false);
			HSDLogo.gameObject.SetActive (false);
			HSDLogo.GetComponent<SimpleMove>().enabled = false;
			HSDLogo.GetComponent<SimpleScale>().enabled = false;
			HSDLogo.GetComponent<SimpleRotateScale>().enabled = false;
		}

		/// <summary>
		/// Fills the dropdown list with all objects that can be placed in to the AR scene.
		/// </summary>
		/// <param name="_captions">The captions to fill the Dropdown List.</param>
		public void SetDropDown(List<Caption> _captions) {
			captions = _captions;
			dropDown.ClearOptions ();
			List<string> captionlist = new List<string> ();
			captionlist.Add ("Plane"); // Plane
			captionlist.Add ("Logo"); // Logo
			foreach (Caption caption in captions) { // Captions
				string id = caption.GetId () + "";
				captionlist.Add (id);
			}
	        dropDown.AddOptions(captionlist);
		}

		/// <summary>
		/// Detects a touch on a tracked plane.
		/// </summary>
		public void ProcessTouches () {

			#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
				if (Input.GetMouseButtonDown (0)) {
					Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
					RaycastHit hit;

					//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
					//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
					if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
						//we're going to get the position from the contact point
						
						/*m_HitTransform.position = hit.point;
						Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

						//and the rotation from the transform of the plane collider
						m_HitTransform.rotation = hit.transform.rotation;*/
						CreateObjectOnHit(hit.point, hit.transform.rotation);		
					}
				}
			#else
				if (Input.touchCount > 0) {
					var touch = Input.GetTouch(0);
					if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved) {
						var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
						ARPoint point = new ARPoint {
							x = screenPosition.x,
							y = screenPosition.y
						};

						// prioritize reults types
						ARHitTestResultType[] resultTypes = {
							ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
							// if you want to use infinite planes use this:
							//ARHitTestResultType.ARHitTestResultTypeExistingPlane,
	                        ARHitTestResultType.ARHitTestResultTypeEstimatedHorizontalPlane, 
							ARHitTestResultType.ARHitTestResultTypeFeaturePoint

						}; 

						foreach (ARHitTestResultType resultType in resultTypes) {
							if (HitTestWithResultType (point, resultType)) {
								return;
							}
						}
					}
				}
			#endif
		}

		/// <summary>
		/// Saves the hit results and creates an object.
		/// </summary>
		/// <param name="point">The point</param>
		/// <param name="resultTypes">The object</param>
		bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes) {
			List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
			if (hitResults.Count > 0) {
				foreach (var hitResult in hitResults) {
					//Debug.Log ("Got hit!");
					CreateObjectOnHit(UnityARMatrixOps.GetPosition (hitResult.worldTransform), UnityARMatrixOps.GetRotation (hitResult.worldTransform));	
					//m_HitTransform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
					//m_HitTransform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
					//Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
					return true;
				}
			}
			return false;
		}

		/// <summary>
		/// Creates an anchor on the given position.
		/// </summary>
		/// <param name="_hitPosition">The position</param>
		/// <param name="_hitRotation">The rotation</param>
		/// <returns>Anchor. Returns the created anchor.</returns>
		public GameObject CreateAnchor(Vector3 _hitPosition, Quaternion _hitRotation) {
			GameObject anchor = new GameObject ();
			anchor.transform.position = _hitPosition;
			anchor.transform.rotation = _hitRotation;
			return anchor;
		}

		/// <summary>
		/// Creates an object on the given hit position.
		/// </summary>
		/// <param name="hitPosition">The position</param>
		/// <param name="hitRotation">The rotation</param>
		public void CreateObjectOnHit(Vector3 hitPosition, Quaternion hitRotation) {

			if (GetDropDownValue().Equals("Plane")) { // falls plane ausgewählt
				if (PresentationPlane.gameObject.activeSelf != true) { // plane aktivieren
					PresentationPlane.gameObject.SetActive(true);
				}
				// wenn plane bereits anchor hat
				if (PresentationPlane.transform.parent.name.Equals("Anchor")) {
					Transform oldAnchor = PresentationPlane.transform.parent; // alten anchor speichern
					GameObject newAnchor = CreateAnchor(hitPosition, hitRotation); // neuen anchor erzeugen
					newAnchor.name = "Anchor";
					newAnchor.transform.parent = transform.Find("Generated");
					PresentationPlane.transform.position = newAnchor.transform.position;
					PresentationPlane.transform.Translate(Vector2.up * (offsetY + 0.5f));
					PresentationPlane.transform.parent = newAnchor.transform; // der plane den neuen anchor zuweisen
					DestroyObject(oldAnchor.gameObject); // alten anchor löschen
				} 
				else {
					GameObject newAnchor = CreateAnchor(hitPosition, hitRotation); // neuen anchor erzeugen
					newAnchor.name = "Anchor";
					newAnchor.transform.parent = transform.Find("Generated");
					PresentationPlane.transform.position = newAnchor.transform.position;
					PresentationPlane.transform.Translate(Vector2.up * (offsetY + 0.5f));
					PresentationPlane.transform.parent = newAnchor.transform; // der plane den neuen anchor zuweisen
	                
				}
			}
			else if (GetDropDownValue().Equals("Logo")) { // falls logo ausgewählt
				if (HSDLogo.gameObject.activeSelf != true) { // logo aktivieren
					HSDLogo.gameObject.SetActive(true);
				}
				// wenn logo keinen anchor hat
				if (!HSDLogo.transform.parent.name.Equals("Anchor")) {
	                    GameObject newAnchor = CreateAnchor(hitPosition, hitRotation); // neuen anchor erzeugen
	                    newAnchor.name = "Anchor";
	                    newAnchor.transform.parent = transform.Find("Generated");
	                    HSDLogo.transform.position = newAnchor.transform.position;
	                    HSDLogo.transform.LookAt(FirstPersonCamera.transform);
	                    //HSDLogo.transform.Translate(Vector2.up * (offsetY + 0.5f));
	                    HSDLogo.transform.parent = newAnchor.transform; // der plane den neuen anchor zuweisen
					}
				}
	            else {
					int.TryParse(GetDropDownValue(), out dropdownValue); // string in int umwandeln
	                                                                     // caption objekt trägt einen ankerpunkt
	                foreach (Caption caption in captions) {
	                    if (caption.GetId() == dropdownValue) {
	                        if (caption.GetAnchor() != null) { // wenn caption schon einen anker hat
	                            DestroyObject(caption.GetAnchor());
	                        }
	                        GameObject anchor = CreateAnchor(hitPosition, hitRotation);
	                        anchor.transform.parent = transform.Find("Generated");
	                        if (caption.GetCaptionModel() == null) {
	                            string name = caption.GetName();
	                            string position = caption.GetPosition();
	                            GameObject captionModel = CreateCaptionModel(name, position);
	                            caption.SetCaptionModel(captionModel);
	                        }
	                        caption.SetAnchor(anchor);
	                        caption.GetCaptionModel().transform.position = caption.GetAnchor().transform.position;
	                        caption.GetCaptionModel().transform.Translate(Vector2.up * offsetY);
	                        caption.GetCaptionModel().transform.parent = caption.GetAnchor().transform;
	                    }
	                }
	           }
		}

		/// <summary>
		/// Called when the HideGUI-Button got touched.
		/// Disables all visible GUI elements and the tracked planes.
		/// </summary>
		public void HideGUIButtonClicked() {
			goBackButton.gameObject.SetActive (false);
			hideGUIButton.gameObject.SetActive (false);
			dropDown.gameObject.SetActive (false);
	        planeLookAt.gameObject.SetActive(false);
			// Trackingplane ausblenden
			foreach (GameObject plane in GameObject.FindGameObjectsWithTag("Plane")) {	
				plane.SetActive (false);
			}
		}

		/// <summary>
		/// Called when the Return-Button got touched.
		/// Activates all visible GUI elements and the tracked planes.
		/// (ONLY WORKS IF A GOBACK BUTTON IS AVAILABLE ON THE MOBILE DEVICE.)
		/// </summary>
		public void ActivateGUI() {
			goBackButton.gameObject.SetActive (true);
			hideGUIButton.gameObject.SetActive (true);
			dropDown.gameObject.SetActive (true);
	        planeLookAt.gameObject.SetActive(true);
			// Trackingplane ausblenden
			foreach (GameObject plane in GameObject.FindGameObjectsWithTag("Plane")) {	
				plane.SetActive (true);
			}
		}

		/// <summary>
		/// Returns the current value of the dropdown element.
		/// </summary>
		/// <returns>String. Returns the value text.</returns>
		public string GetDropDownValue() {
			return dropDown.captionText.text;
		}

		/// <summary>
		/// Creates the caption model.
		/// </summary>
		/// <returns>Caption. Returns the plotted caption model.</returns>
		public GameObject CreateCaptionModel(string _name, string _position) {
			GameObject newCaption = Instantiate(CaptionPrefab, transform.Find("Generated"), true);
			newCaption.GetComponent<Plotter>().Set3DText(_name, _position);
			return newCaption;
		}

		/// <summary>
		/// Rotates presentation plane and captions pointing to the camera.
		/// </summary>
		public void	LookAtCamera() {
	       	if(PresentationPlane.gameObject.activeSelf && planeLookAt.isOn) {
				PresentationPlane.transform.LookAt(FirstPersonCamera.transform);
			}
			if (captions.Count > 0) {
				foreach (Caption caption in captions) {
					if (caption.GetCaptionModel () != null) {
						caption.GetCaptionModel ().transform.LookAt (FirstPersonCamera.transform);
					}
				}
			}
		}
		
		// Update is called once per frame
		void Update () {
			// presentation plane and captions shall look at the camera
			LookAtCamera ();

			// logo should only be scalable/moveable if selected
			if(GetDropDownValue().Equals("Logo")){
				HSDLogo.GetComponent<SimpleMove>().enabled = true;
				HSDLogo.GetComponent<SimpleScale>().enabled = true;
				HSDLogo.GetComponent<SimpleRotateScale>().enabled = true;
			} else {
				HSDLogo.GetComponent<SimpleMove>().enabled = false;
				HSDLogo.GetComponent<SimpleScale>().enabled = false;
				HSDLogo.GetComponent<SimpleRotateScale>().enabled = false;
			}
		}
	}
}